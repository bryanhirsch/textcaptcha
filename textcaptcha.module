<?php 

/**
*  @file
*  Provides integration between the CAPTCHA module [http://drupal.org/project/captcha]
*  and the text-only CAPTCHA service textcaptcha.com
*/

define('TEXTCAPTCHA_URL_PREFIX', 'http://textcaptcha.com/api/');

/**
*  Implementation of hook_menu()
*/
function textcaptcha_menu() {
  $items = array();
  $items['admin/config/people/captcha/textcaptcha'] = array(
    'title' => 'Text CAPTCHA',
    'description' => 'Builds CAPTCHAs that use text rather than images.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('textcaptcha_settings_form'),
    'access arguments' => array('administer CAPTCHA settings'),
    'type' => MENU_LOCAL_TASK
  );
  return $items;
}

/**
*  Admin settings form callback
*/
function textcaptcha_settings_form() {
  $form = array();

  $form['instructions']['#value'] = t('To use TextCAPTCHA, you need to get an API key by !link',
                      array('!link' => l('registering at textcaptcha.com',
                                 'http://textcaptcha.com/register')));

  $form['textcaptcha_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Textcaptcha.com API key'),
    '#description' => t('Your API key from textcaptcha.com'),
    '#default_value' => variable_get('textcaptcha_api_key', ''),
    '#required' => TRUE,
  );

  $form['textcaptcha_cache_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of challenges to keep cached locally'),
    '#description' => t('TextCAPTCHA calls a web service on cron runs to retrieve new challenge questions. This number determines how many challenges to keep cached at a time.'),
    '#default_value' => variable_get('textcaptcha_cache_limit', 30),
  );

  $form['actions']['text_captcha'] = array(
    '#type' => 'submit',
    '#value' => t('Retrieve new captcha challenges'),
    '#submit' => array('textcaptcha_get_new_challenges'),
  );

  return system_settings_form($form);
}

/**
 * Get new challenge questions and cache them.
 */
function textcaptcha_get_new_challenges() {
  $success = 0;
  for ($i = 0; $i < 10; $i++) {
    if ($challenge = textcaptcha_get_new_challenge()) {
      textcaptcha_cache_new_challenge($challenge);
      $success++;
    }
  }

  if ($success < 1) {
    $text = t('Sorry. After trying !i times, I was unable to retrieve any new
    challenge questions. Either your API key is bad, you are not online, or the
    web service you are trying to reach is not responding.', array('!i' => $i));
    drupal_set_message($text, 'warning');
  }
  else {
    $text = t('Success! You have !success new challenge questions. (!success/!i
    attempts to retrieve new challenge questions were successful.)',
      array(
        '!success' => $success,
        '!i' => $i,
      )
    );
    drupal_set_message($text, 'success');
  }
}

/**
*  Form validation for admin settings. Here we check that the API key works.
*/
function textcaptcha_settings_form_validate($form, $form_state) {
  $result = textcaptcha_http_request();
  if ($result->code !== '200') {
    form_set_error('textcaptcha_api_key', t('The API Key did not work or the server cannot contact textcaptcha.com'));
  }
}

/**
 * Implementation of hook_captcha().
 */
function textcaptcha_captcha($op, $captcha_type='') {
  switch ($op) {
    case 'list' :
      return array('Text Captcha');
      break;
    case 'generate' :
      $result = array();
      if ($captcha_type == 'Text Captcha') {
        $challenge = textcaptcha_get_challenge();
        $result['form']['captcha_response'] = array(
          '#type' => 'textfield',
          '#title' => $challenge['question'],
          '#description' => t('Question text provided by !link',
                              array('!link' => l('textcaptcha.com', 'http://textcaptcha.com'))
                             ),
          '#size' => 50,
          '#maxlength' => 50,
          '#required' => TRUE,
        );
        $result['solution'] = serialize($challenge['answers']);
        $result['captcha_validate'] = 'textcaptcha_captcha_validate';

        return $result;
      }
    break;
  }
}

/**
 * Retrieves CAPTCHA and possible answer list from the textcaptcha.com service
 *
 * @return array $challenge
 *   @see textcaptcha_parse_data().
 */
function textcaptcha_get_challenge() {
  $challenge = array();

  if (!$key = variable_get('textcaptcha_api_key', FALSE)) {
    return FALSE;
  }

  // Try to retreive a cached captcha challenge question.
  if ($cache = cache_get('textcaptcha_challenges')) {
    $challenges = $cache->data;
    $key = array_rand($challenges);
    $challenge = $challenges[$key];
  }
  else {
    // If no cached challenges are available try and get one on the fly
    // from web service. 
    $challenge = textcaptcha_get_new_challenge();
    if ($challenge) {
      textcaptcha_cache_new_challenge($challenge);
    }
  }

  // Handle empty response.
  if (!$challenge) {
    $text = t("Sorry. Something went wrong. This CAPTCHA won't work. Please reload your page.");
    drupal_set_message($text, 'warning');
    $challenge['question'] = $text;
    $challenge['answers'] = array();
  }

  return $challenge;
}

/**
*  Custom CAPTCHA validation callback.
*/
function textcaptcha_captcha_validate($solution, $response) {
  if(!unserialize($solution)) {
    return TRUE;
  }
  return (in_array(md5(drupal_strtolower(trim($response))), unserialize($solution)));
}

/**
*  Implementation of hook_requirements()
*/
function textcaptcha_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    if (variable_get('textcaptcha_api_key', FALSE)) {
      $requirements['textcaptcha_api_key'] = array(
        'title' => t('Text CAPTCHA'),
        'value' => t('API Key updated and server contacted'),
        'severity' => REQUIREMENT_OK,
      );
    }
    else {
       $requirements['textcaptcha_api_key'] = array(
        'title' => t('Text CAPTCHA'),
        'value' => t('API Key missing. Plese !link for an API key and then update the !settings.',
                      array('!link' => l('registering at textcaptcha.com',
                                 'http://textcaptcha.com/register'),
                            '!settings' => l('Text CAPTCHA settings',
                               'admin/user/captcha/textcaptcha'))),
        'severity' => REQUIREMENT_WARNING,
      );
    }
  }
  return $requirements;
}

/**
 * @param array $data
 *  Data from a successful drupal_http_request() call to textcaptcha.com API
 *
 * @return array $challenge
 *  Return array including challenge and md5 hash of valid answers.
 *    e.g. $challenge(
 *            'question' => 'What color is the sky?',
 *            'answers' => array('c9f0f895f', '24d27c169'),
 *    );
 */
function textcaptcha_parse_data($data) {
  $parser = drupal_xml_parser_create($data);
  $captcha_xml = array();
  xml_parse_into_struct($parser, $data, $captcha_xml);

  $challenge = array();
  foreach ($captcha_xml as $element) {
    if ($element['tag'] == 'QUESTION' && $element['type'] == 'complete') {
      $challenge['question'] = $element['value'];
    }
    if ($element['tag'] == 'ANSWER' && $element['type'] == 'complete') {
      $challenge['answers'][] = $element['value'];
    }
  }

  return $challenge;
}

/**
 * Implements hook_cron().
 *
 * Every time cron runs it checks for a new challenge question to add to the
 * cache. If there 100 cached challenges, drop the oldest.
 *
 */
function textcaptcha_cron() {
  $challenge = textcaptcha_get_new_challenge();
  textcaptcha_cache_new_challenge($challenge);
}

/**
 * Cache new challenge question.
 *
 * @param array $challenge
 *   @see textcaptcha_parse_data().
 */
function textcaptcha_cache_new_challenge($challenge) {
  // Store challenge with other cached challenges.
  if ($cache = cache_get('textcaptcha_challenges')) {
    $data = $cache->data;
    // If the cache is full, remove the oldest, to be replaced with the new one.
    $limit = variable_get('textcaptcha_cache_limit', 50);
    $limit = (is_int($limit)) ? $limit : 50;
    if (count($data) > $limit) {
      array_shift($data);
    }
    $data[] = $challenge;
  }
  else {
    $data = array($challenge);
  }
  cache_set('textcaptcha_challenges', $data);
}

/**
 * Retrieve a new challenge from textcaptcha web service and cache it.
 *
 * @return
 *  $challenge array or FALSE
 */
function textcaptcha_get_new_challenge() {
  // Attempt to retrieve a new challenge from the web service.
  $success = FALSE;
  for ($i = 1; $i <= 10; $i++) {
    $response = textcaptcha_http_request();
    if (!$response->code == 200) {
      // We didn't get a successful response. Log failed attempt.
      $text = t('Failed attempt !n to get textcaptcha question from !api.', array('!n' => $i, '!api' => TEXTCAPTCHA_URL_PREFIX));
      watchdog('textcaptcha', $text);
    }
    else {
      // Log success.
      $success = TRUE;
      $text = t('Successfully retrieved new textcaptcha challenge question on attempt !n', array('!n' => $i));
      watchdog('textcaptcha', $text);
      break;  
    }
  }

  return ($success) ? textcaptcha_parse_data($response->data) : FALSE;
}

/**
 * Wrapper around textcaptcha API call.
 *
 * @return array
 *  Response from drupal_http_request() to textcaptcha web service.
 */
function textcaptcha_http_request() {
  $response = drupal_http_request(TEXTCAPTCHA_URL_PREFIX . trim(variable_get('textcaptcha_api_key', '')));
  return $response;
}
